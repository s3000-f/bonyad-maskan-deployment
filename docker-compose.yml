version: "3.8"
services:
  main:
    build: ./code/main
    container_name: main
    restart: always
    depends_on:
      - postgres
    ports:
      - 3003:3003
    volumes:
      - ./uploads:/uploads
    networks:
      - backend

  survey:
    build: ./code/survey
    container_name: survey
    restart: always
    depends_on:
      - postgres
    ports:
      - 3001:3001
    volumes:
      - ./uploads:/uploads
    networks:
      - backend

  core:
    build: ./code/core
    container_name: core
    restart: always
    depends_on:
      - postgres
    ports:
      - 3004:3004
    networks:
      - backend
  
  auth:
    build: ./code/auth
    container_name: auth
    restart: always
    depends_on:
      - postgres
    ports:
      - 3002:3002
    networks:
      - backend

  frontend:
    build: ./code/frontend
    container_name: frontend
    restart: always
    depends_on:
      - backend
    ports:
      - 3000:3000
    networks:
      - frontend
  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    container_name: nest-nginx
    restart: always
    depends_on:
      - backend
      - frontend
    environment:
      - NGINX_SERVER_NAME=soroushfathi.com
      - MAIN_HOST=main
      - SURVEY_HOST=survey
      - AUTH_HOST=auth
      - CORE_HOST=core
      - FRONTEND_HOST=frontend
      - MAIN_PORT=3003
      - CORE_PORT=3004
      - AUTH_PORT=3002
      - SURVEY_PORT=3001
      - FRONTEND_PORT=3000
      - NGINX_MAX_BODY=500M
    ports:
      - 80:80
    volumes:
      - ./local_files:/app/files
    networks:
      - backend
      - frontend

  postgres:
    image: postgres:13
    container_name: bonyad-postgres
    restart: always
    ports:
      - 5432:5432
    environment:
      POSTGRES_USER: bonyadPostgres
      POSTGRES_PASSWORD: kLyx0FtpaoB4zoyhOBcM
      POSTGRES_DB: bonyad
    volumes:
      - ./postgres-data:/var/lib/postgresql/data
    networks:
      - backend
  
  redis:
    image: redis:latest
    ports:
      - 6379:6379
    restart: always
    command: redis-server --requirepass nm2CmRIpbCtFZToRD6Ks
    networks:
      - backend
networks:
  backend:
  frontend: